{"version":3,"sources":["meteor://ðŸ’»app/client/templates/lists-show.js"],"names":[],"mappings":"yfile":"/client/templates/lists-show.js","sourcesContent":["var EDITING_KEY = 'editingList';\nSession.setDefault(EDITING_KEY, false);\n\n// Track if this is the first time the list template is rendered\nvar firstRender = true;\nvar listRenderHold = LaunchScreen.hold();\nlistFadeInHold = null;\n\nTemplate.listsShow.onRendered(function() {\n  if (! Meteor.user()) {\n    Router.go('signin');\n  }\n\n  if (firstRender) {\n    // Released in app-body.js\n    listFadeInHold = LaunchScreen.hold();\n\n    // Handle for launch screen defined in app-body.js\n    listRenderHold.release();\n\n    firstRender = false;\n  }\n\n  this.find('.js-title-nav')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn();\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        this.remove();\n      });\n    }\n  };\n});\n\nTemplate.listsShow.helpers({\n  editing: function() {\n    return Session.get(EDITING_KEY);\n  },\n\n  todosReady: function() {\n    return Router.current().todosHandle.ready();\n  },\n\n  todos: function(listId) {\n    return Messages.find({listId: listId}, {sort: {createdAt : -1}});\n  }\n});\n\nvar editList = function(list, template) {\n  Session.set(EDITING_KEY, true);\n\n  // force the template to redraw based on the reactive change\n  Tracker.flush();\n  template.$('.js-edit-form input[type=text]').focus();\n};\n\nvar saveList = function(list, template) {\n  Session.set(EDITING_KEY, false);\n  Lists.update(list._id, {$set: {name: template.$('[name=name]').val()}});\n}\n\nTemplate.listsShow.events({\n  'click .js-cancel': function() {\n    Session.set(EDITING_KEY, false);\n  },\n\n  'keydown input[type=text]': function(event) {\n    // ESC\n    if (27 === event.which) {\n      event.preventDefault();\n      $(event.target).blur();\n    }\n  },\n\n  'blur input[type=text]': function(event, template) {\n    // if we are still editing (we haven't just clicked the cancel button)\n    if (Session.get(EDITING_KEY))\n      saveList(this, template);\n  },\n\n  'submit .js-edit-form': function(event, template) {\n    event.preventDefault();\n    saveList(this, template);\n  },\n\n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-cancel, click .js-cancel': function(event) {\n    event.preventDefault();\n    Session.set(EDITING_KEY, false);\n  },\n\n  'change .list-edit': function(event, template) {\n    if ($(event.target).val() === 'edit') {\n      editList(this, template);\n    } else if ($(event.target).val() === 'delete') {\n      deleteList(this, template);\n    } else {\n      toggleListPrivacy(this, template);\n    }\n\n    event.target.selectedIndex = 0;\n  },\n\n  'click .js-edit-list': function(event, template) {\n    editList(this, template);\n  },\n\n  'click .js-todo-add': function(event, template) {\n    template.$('.js-todo-new input').focus();\n  },\n\n  'submit .js-todo-new': function(event) {\n    event.preventDefault();\n\n    var $input = $(event.target).find('[type=text]');\n    if (! $input.val())\n      return;\n\n    Messages.insert({\n      listId: this._id,\n      senderId: this.userId,\n      text: $input.val(),\n      checked: false,\n      createdAt: new Date()\n    });\n    Lists.update(this._id, {$inc: {messageCount: 1}});\n    $input.val('');\n  }\n});\n"]}